---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-daemonset-config
  namespace: kube-system
  labels:
    k8s-app: metricbeat
data:
  metricbeat.yml: |-
    metricbeat.config.modules:
      # Mounted `metricbeat-daemonset-modules` configmap:
      path: ${path.config}/modules.d/*.yml
      # Reload module configs as they change:
      reload.enabled: false

    #============================== Autodiscover ===================================

    # Autodiscover allows you to detect changes in the system and spawn new modules
    # as they happen.

    metricbeat.autodiscover:
      # List of enabled autodiscover providers
      providers:
        - type: docker
          templates:
            - condition:
                equals.docker.container.image: etcd
              config:
                - module: etcd
                  metricsets: ["leader", "self", "store"]
                  period: 10s
                  hosts: ["${host}:2379"]
        - type: kubernetes
          node: ${NODE_NAME}
          hints.enabled: true

    #==========================  Modules configuration =============================
    metricbeat.modules:

    #-------------------------------- System Module --------------------------------
    - module: system
      metricsets:
        - cpu             # CPU usage
        - load            # CPU load averages
        - memory          # Memory usage
        - network         # Network IO
        - process         # Per process metrics
        - process_summary # Process summary
        - uptime          # System Uptime
        - socket_summary  # Socket summary
        - core           # Per CPU core usage
        - diskio         # Disk IO
        - filesystem     # File system usage for each mountpoint
        - fsstat         # File system summary metrics
        #- raid           # Raid
        #- socket         # Sockets and connection info (linux only)
        #- service        # systemd service information, gives ERROR when enabled
      enabled: true
      period: 10s
      processes: ['.*']

      # Configure the metric types that are included by these metricsets.
      cpu.metrics:  ["percentages","normalized_percentages"]
      core.metrics: ["percentages"]

    #-------------------------------- Docker Module --------------------------------
    - module: docker
      metricsets:
        - "container"
        - "cpu"
        - "diskio"
        - "event"
        - "healthcheck"
        - "info"
        #- "image"
        - "memory"
        - "network"
      hosts: ["unix:///var/run/docker.sock"]
      period: 10s
      enabled: true

    #------------------------------ Kubernetes Module ------------------------------
    # Node metrics, from kubelet:
    - module: kubernetes
      metricsets:
        - container
        - node
        - pod
        - system
        - volume
      period: 10s
      enabled: true
      hosts: ["https://${NODE_NAME}:10250"]
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      ssl.verification_mode: "none"
      #ssl.certificate_authorities:
      #  - /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
      #ssl.certificate: "/etc/pki/client/cert.pem"
      #ssl.key: "/etc/pki/client/cert.key"

      # Enriching parameters:
      add_metadata: true
      # When used outside the cluster:
      #host: node_name
      # If kube_config is not set, KUBECONFIG environment variable will be checked
      # and if not present it will fall back to InCluster
      #kube_config: ~/.kube/config

    # State metrics from kube-state-metrics service:
    - module: kubernetes
      enabled: true
      metricsets:
        - state_node
        - state_deployment
        - state_replicaset
        - state_statefulset
        - state_pod
        - state_container
        - state_cronjob
        - state_resourcequota
        - state_service
        - state_persistentvolume
        - state_persistentvolumeclaim
        - state_storageclass
        # Uncomment this to get k8s events:
        #- event  period: 10s
      hosts: ["kube-state-metrics:8080"]

      # Enriching parameters:
      add_metadata: true
      # When used outside the cluster:
      #host: node_name
      # If kube_config is not set, KUBECONFIG environment variable will be checked
      # and if not present it will fall back to InCluster
      #kube_config: ~/.kube/config

    # Kubernetes API server
    # (when running metricbeat as a deployment)
    - module: kubernetes
      enabled: true
      metricsets:
        - apiserver
      hosts: ["https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"]
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      ssl.certificate_authorities:
        - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      period: 30s



    # Kubernetes proxy server
    # (when running metricbeat locally at hosts or as a daemonset + host network)
    - module: kubernetes
      enabled: true
      metricsets:
        - proxy
      hosts: ["localhost:10249"]
      period: 10s

    processors:
      - add_cloud_metadata:

    #hostPid: true

      - add_docker_metadata:
          host: "unix:///var/run/docker.sock"
          match_fields: ["system.process.cgroup.id"]
          match_pids: ["process.pid", "process.ppid"]
          match_source: true
          match_source_index: 4
          match_short_id: false
          cleanup_timeout: 60
          labels.dedot: false
          # To connect to Docker over TLS you must specify a client and CA certificate.
          #ssl:
          #  certificate_authority: "/etc/pki/root/ca.pem"
          #  certificate:           "/etc/pki/client/cert.pem"
          #  key:                   "/etc/pki/client/cert.key"

      - add_host_metadata: ~



    cloud.id: ${ELASTIC_CLOUD_ID}
    cloud.auth: ${ELASTIC_CLOUD_AUTH}

    output.elasticsearch:
      hosts: ['${ELASTICSEARCH_HOST:elasticsearch}:${ELASTICSEARCH_PORT:9200}']
      username: ${ELASTICSEARCH_USERNAME}
      password: ${ELASTICSEARCH_PASSWORD}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-daemonset-modules
  namespace: kube-system
  labels:
    k8s-app: metricbeat
data:
  system.yml: |-
    - module: system
      period: 10s
      metricsets:
        - cpu
        - load
        - memory
        - network
        - process
        - process_summary
        - core
        #- diskio
        #- socket
      processes: ['.*']
      process.include_top_n:
        by_cpu: 5      # include top 5 processes by CPU
        by_memory: 5   # include top 5 processes by memory

    - module: system
      period: 1m
      metricsets:
        - filesystem
        - fsstat
      processors:
      - drop_event.when.regexp:
          system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib|snap)($|/)'
  kubernetes.yml: |-
    - module: kubernetes
      metricsets:
        - node
        - system
        - pod
        - container
        - volume
      period: 10s
      host: ${NODE_NAME}
      hosts: ["https://${NODE_NAME}:10250"]
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      ssl.verification_mode: "none"
      # If there is a CA bundle that contains the issuer of the certificate used in the Kubelet API,
      # remove ssl.verification_mode entry and use the CA, for instance:
      #ssl.certificate_authorities:
        #- /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
    # Currently `proxy` metricset is not supported on Openshift, comment out section
    - module: kubernetes
      metricsets:
        - proxy
      period: 10s
      host: ${NODE_NAME}
      hosts: ["localhost:10249"]
---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-deployment-config
  namespace: kube-system
  labels:
    k8s-app: metricbeat
data:
  metricbeat.yml: |-
    metricbeat.config.modules:
      # Mounted `metricbeat-daemonset-modules` configmap:
      path: ${path.config}/modules.d/*.yml
      # Reload module configs as they change:
      reload.enabled: false

    processors:
      - add_cloud_metadata:

    cloud.id: ${ELASTIC_CLOUD_ID}
    cloud.auth: ${ELASTIC_CLOUD_AUTH}

    output.elasticsearch:
      hosts: ['${ELASTICSEARCH_HOST:elasticsearch}:${ELASTICSEARCH_PORT:9200}']
      username: ${ELASTICSEARCH_USERNAME}
      password: ${ELASTICSEARCH_PASSWORD}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-deployment-modules
  namespace: kube-system
  labels:
    k8s-app: metricbeat
data:
  # This module requires `kube-state-metrics` up and running under `kube-system` namespace
  kubernetes.yml: |-
    - module: kubernetes
      metricsets:
        - state_node
        - state_deployment
        - state_replicaset
        - state_pod
        - state_container
        - state_cronjob
        - state_resourcequota
        # Uncomment this to get k8s events:
        - event
      period: 10s
      host: ${NODE_NAME}
      hosts: ["kube-state-metrics:8080"]
---
